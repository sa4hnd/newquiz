generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Subject {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
  quizResults QuizResult[]
}

model Year {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
  quizResults QuizResult[]
}

model Course {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[]
  quizResults QuizResult[]
}

model Question {
  id        Int     @id @default(autoincrement())
  text      String
  options   String  // Stored as JSON string
  answer    String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int
  year      Year    @relation(fields: [yearId], references: [id])
  yearId    Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
}

<<<<<<< HEAD
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
=======
model User {
  id              String   @id @default(cuid())
  firebaseUid     String   @unique
  email           String   @unique
  displayName     String?
  photoURL        String?
  emailVerified   Boolean  @default(false)
  isAdmin         Boolean  @default(false)
  isBanned        Boolean  @default(false)
  hasAccess       Boolean  @default(false)
  streakDays      Int      @default(0)
  quizzesTaken    Int      @default(0)
  totalScore      Int      @default(0)
  totalQuestions  Int      @default(0)
  averageScore    Float    @default(0)
  lastStreakUpdate DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  quizResults     QuizResult[]
  quizzes         Quiz[]  // Add this line to create the relation with Quiz model
}

model QuizResult {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  subject     Subject  @relation(fields: [subjectId], references: [id])
  subjectId   Int
  year        Year     @relation(fields: [yearId], references: [id])
  yearId      Int
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  score       Int
  total       Int
  percentage  Float
  createdAt   DateTime @default(now())
}

model Quiz {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  createdAt DateTime @default(now())
>>>>>>> temp-branch
}